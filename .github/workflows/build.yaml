name: Build OpenWrt Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenWrt version'
        required: true
        default: '24.10.3'
      target:
        description: 'Target'
        required: true
        default: 'mediatek'
      subtarget:
        description: 'Subtarget'
        required: true
        default: 'filogic'
      tag_name:
        description: 'Release tag (optional, will use PKG_VERSION if empty)'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gawk git python3 python3-setuptools \
            rsync unzip wget xz-utils zstd

      - name: Extract package version from Makefile
        id: version
        run: |
          PKG_VERSION=$(grep '^PKG_VERSION:=' Makefile | cut -d= -f2)
          if [ -z "$PKG_VERSION" ]; then
            echo "Cannot find PKG_VERSION in Makefile"
            exit 1
          fi
          # Используем input tag_name если задан, иначе PKG_VERSION
          TAG_NAME=${{ github.event.inputs.tag_name }}
          if [ -z "$TAG_NAME" ]; then
            TAG_NAME=$PKG_VERSION
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

      - name: Download OpenWrt SDK
        run: |
          VERSION=${{ github.event.inputs.version }}
          TARGET=${{ github.event.inputs.target }}
          SUBTARGET=${{ github.event.inputs.subtarget }}
          BASE_URL="https://downloads.openwrt.org/releases/${VERSION}/targets/${TARGET}/${SUBTARGET}"
          SDK_FILE=$(wget -qO- ${BASE_URL}/sha256sums | grep "openwrt-sdk" | head -1 | awk '{print $2}' | sed 's/^\*//')
          if [ -z "$SDK_FILE" ]; then
            echo "Error: SDK file not found"; exit 1
          fi
          wget --timeout=60 --tries=3 "${BASE_URL}/${SDK_FILE}"
          if [[ "$SDK_FILE" == *.tar.zst ]]; then
            tar --use-compress-program=unzstd -xf "${SDK_FILE}"
          elif [[ "$SDK_FILE" == *.tar.xz ]]; then
            tar -xJf "${SDK_FILE}"
          else
            tar -xf "${SDK_FILE}"
          fi
          SDK_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*" | head -1)
          mv "$SDK_DIR" sdk

      - name: Copy package
        run: |
          mkdir -p sdk/package/luci-app-dnscrypt-proxy2
          cp -r ./* sdk/package/luci-app-dnscrypt-proxy2/ || true
          rm -rf sdk/package/luci-app-dnscrypt-proxy2/.github
          rm -rf sdk/package/luci-app-dnscrypt-proxy2/.git

      - name: Update and install feeds
        run: |
          cd sdk
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure build
        run: |
          cd sdk
          echo "CONFIG_PACKAGE_luci-app-dnscrypt-proxy2=y" >> .config
          make defconfig

      - name: Build package
        run: |
          cd sdk
          make package/luci-app-dnscrypt-proxy2/compile V=s

      - name: Collect only luci-app-dnscrypt-proxy2 .ipk
        run: |
          mkdir -p release
          find sdk/bin -type f -name "luci-app-dnscrypt-proxy2_*.ipk" -exec cp {} release/ \;
          echo "Built package:"
          ls -la release/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-dnscrypt-proxy2-${{ github.event.inputs.target }}-${{ github.event.inputs.subtarget }}-${{ github.event.inputs.version }}
          path: release/*.ipk
          retention-days: 30

      - name: Create Release (automatic tag from Makefile)
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.ipk
          tag_name: ${{ env.tag_name }}
          name: luci-app-dnscrypt-proxy2-${{ github.event.inputs.target }}-${{ github.event.inputs.subtarget }}-${{ github.event.inputs.version }}-${{ env.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean SDK and build files
        if: always()
        run: |
          echo "Cleaning SDK and temporary build files..."
          rm -rf sdk
          rm -rf release
          rm -rf *.tar.* *.zst
