name: Build luci-app-dnscrypt-proxy2 for OpenWrt/ImmortalWrt

on:
  workflow_dispatch:
    inputs:
      firmware_type:
        description: "Firmware type"
        type: choice
        required: true
        default: "openwrt"
        options:
          - "openwrt"
          - "immortalwrt"
      openwrt_version:
        description: "OpenWrt/ImmortalWrt version (e.g., 24.10.4 or SNAPSHOT)"
        type: string
        required: true
        default: "24.10.4"
      openwrt_target:
        description: "Target (e.g., mediatek)"
        type: string
        required: true
        default: "mediatek"
      openwrt_subtarget:
        description: "Subtarget (e.g., filogic)"
        type: string
        required: true
        default: "filogic"
      openwrt_arch:
        description: "Architecture (e.g., aarch64_cortex-a53)"
        type: string
        required: true
        default: "aarch64_cortex-a53"

jobs:
  build-package:
    name: "Build LuCI for ${{ inputs.firmware_type }}: ${{ inputs.openwrt_version }} - ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
        
    steps:
    
    # 1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: false
        
    - name: Install dependencies
      run: |
        set -e -x
        sudo apt-get update
        sudo apt-get install -y build-essential gawk git python3 python3-setuptools rsync unzip wget xz-utils zstd
        
    - name: Extract package version from Makefile and set release tag
      id: pkg_version
      run: |
        set -e -x
        PKG_VERSION=$(grep '^PKG_VERSION:=' Makefile | cut -d= -f2 | tr -d '[:space:]')
        if [ -z "$PKG_VERSION" ]; then
          echo "‚ùå Cannot find PKG_VERSION in Makefile"
          exit 1
        fi
        echo "‚úÖ Found PKG_VERSION: $PKG_VERSION"
        echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
        TAG_NAME="luci-app-dnscrypt-proxy2-${{ inputs.firmware_type }}-${{ inputs.openwrt_version }}-${{ inputs.openwrt_target }}-${{ inputs.openwrt_subtarget }}-${PKG_VERSION}"
        echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
        echo "release_name=DNSCrypt Proxy LuCI Interface ${{ inputs.firmware_type }}-${{ inputs.openwrt_version }} for ${{ inputs.openwrt_arch }}" >> $GITHUB_ENV
        
    - name: Prepare SDK and Configure Build üõ†Ô∏è
      run: |
        set -e -x
        
        FIRMWARE_TYPE="${{ inputs.firmware_type }}"
        VERSION="${{ inputs.openwrt_version }}"
        TARGET="${{ inputs.openwrt_target }}"
        SUBTARGET="${{ inputs.openwrt_subtarget }}"
        
        # 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL SDK
        if [ "$FIRMWARE_TYPE" = "openwrt" ]; then
          BASE_DOMAIN="downloads.openwrt.org"
          SDK_PATTERN="openwrt-sdk"
        else
          BASE_DOMAIN="downloads.immortalwrt.org"
          SDK_PATTERN="immortalwrt-sdk"
        fi
        if [ "$VERSION" = "SNAPSHOT" ]; then
          BASE_URL="https://${BASE_DOMAIN}/snapshots/targets/${TARGET}/${SUBTARGET}/"
        else
          BASE_URL="https://${BASE_DOMAIN}/releases/${VERSION}/targets/${TARGET}/${SUBTARGET}/"
        fi
        
        echo "üîç Searching SDK at: ${BASE_URL}"
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ SDK
        sdk_url=$(curl -s "${BASE_URL}" | grep -oP "href=\"${SDK_PATTERN}[^\"]+\.tar\.(xz|zst|gz|bz2)\"" | sed -e 's/href="//' -e 's/"$//' | head -n1)
        
        if [[ -z "$sdk_url" ]]; then
          echo "‚ùå SDK file not found at ${BASE_URL}"
          echo "Available files:"
          curl -s "${BASE_URL}" | grep -o "href=\"[^\"]*\.tar\.[^\"]*\"" | head -10
          exit 1
        fi
        
        echo "‚úÖ Found SDK: ${sdk_url}"
        
        curl -fsLO "${BASE_URL}${sdk_url}" || { echo "‚ùå Failed to download SDK"; exit 1; }
        file_name=$(basename "$sdk_url")
        
        echo "üì¶ Extracting SDK..."
        tar -xf "$file_name" || { echo "‚ùå Failed to extract SDK"; exit 1; }
        rm -f *.tar.*
        
        SDK_DIR=$(find . -maxdepth 1 -type d -name "*${SDK_PATTERN}*" | head -1)
        if [[ -z "$SDK_DIR" ]]; then
          echo "‚ùå SDK directory not found after extraction"
          exit 1
        fi
        
        mv "$SDK_DIR" sdk
        echo "‚úÖ SDK prepared in ./sdk/"
        
        # 3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ LuCI-–ø–∞–∫–µ—Ç–∞ –≤ SDK/package/
        echo "üì¶ Copying luci-app-dnscrypt-proxy2 to SDK/package/..."
        mkdir -p sdk/package/luci-app-dnscrypt-proxy2
        rsync -av --exclude 'sdk' --exclude '.git' --exclude '.github' . sdk/package/luci-app-dnscrypt-proxy2/
        
        echo "‚úÖ LuCI package copied to SDK"
        
        # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–¥–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        cd sdk
        echo "üîÑ Updating feeds..."
        ./scripts/feeds update -a || { echo "‚ùå Failed to update feeds"; exit 1; }
        
        echo "üì• Installing required packages..."
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ feeds (dnscrypt-proxy2, luci-compat, luci-lib-ip)
        ./scripts/feeds install dnscrypt-proxy2 || { echo "‚ùå Failed to install dnscrypt-proxy2"; exit 1; }
        ./scripts/feeds install luci-compat || { echo "‚ùå Failed to install luci-compat"; exit 1; }
        ./scripts/feeds install luci-lib-ip || { echo "‚ùå Failed to install luci-lib-ip"; exit 1; }
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∞–º LuCI-–ø–∞–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏
        ./scripts/feeds install luci-app-dnscrypt-proxy2 || { echo "‚ùå Failed to install luci-app-dnscrypt-proxy2"; exit 1; }
        echo "‚úÖ All dependencies installed"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ config.buildinfo
        echo "‚öôÔ∏è  Downloading base config..."
        curl -fsL "${BASE_URL}/config.buildinfo" > .config || { echo "‚ö†Ô∏è  config.buildinfo not found, using default"; }
        
        # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º –Ω–∞—à –ø–∞–∫–µ—Ç –∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (dnscrypt-proxy2)
        echo "CONFIG_PACKAGE_luci-app-dnscrypt-proxy2=y" >> .config
        echo "CONFIG_PACKAGE_dnscrypt-proxy2=y" >> .config
        
        make defconfig
        echo "‚úÖ Build configuration completed"
        
        
    - name: Compile LuCI Package
      run: |
        set -e -x
        cd sdk
        echo "üî® Compiling luci-app-dnscrypt-proxy2..."
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º LuCI-–ø–∞–∫–µ—Ç. dnscrypt-proxy2 –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ Feeds.
        make package/luci-app-dnscrypt-proxy2/compile V=s -j $(nproc) || { echo "‚ùå Failed to compile LuCI package"; exit 1; }
        echo "‚úÖ LuCI package compiled successfully"
        
    - name: Prepare artifacts for release
      id: prepare_artifacts
      run: |
        set -e -x
        mkdir -p release
        
        echo "üì¶ Collecting built packages..."
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à LuCI-–ø–∞–∫–µ—Ç (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
        find sdk/bin -type f -name "*luci-app-dnscrypt-proxy2*.ipk" -exec cp {} release/ \;
        
        IPK_COUNT=$(find release -type f -name "*.ipk" | wc -l)
        if [ "$IPK_COUNT" -eq 0 ]; then
          echo "‚ùå No IPK files found! Build may have failed."
          echo "Contents of sdk/bin:"
          find sdk/bin -type f -name "*.ipk" || echo "No IPK files in sdk/bin"
          exit 1
        fi
        
        echo "‚úÖ Found $IPK_COUNT package(s):"
        ls -lh release/
        
    - name: Get current date for release notes
      id: get_date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        tag_name: ${{ env.tag_name }}
        name: ${{ env.release_name }}
        body: |
          ## üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ DNSCrypt Proxy (LuCI)
          
          –≠—Ç–æ—Ç —Ä–µ–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç **luci-app-dnscrypt-proxy2** (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å LuCI).
          –î–µ–º–æ–Ω **dnscrypt-proxy2** –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–æ—à–∏–≤–∫–∏.
          
          ### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ
          - **–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** ${{ steps.get_date.outputs.date }}
          - **–ü—Ä–æ—à–∏–≤–∫–∞:** ${{ inputs.firmware_type }}
          - **–í–µ—Ä—Å–∏—è:** ${{ inputs.openwrt_version }}
          - **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** ${{ inputs.openwrt_arch }}
          - **Target/Subtarget:** ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}
          - **–í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞:** ${{ env.PKG_VERSION }}
          
          ### üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞
          –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞ `dnscrypt-proxy2` (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –ø–∞–∫–µ—Ç), –∞ –∑–∞—Ç–µ–º –¥–∞–Ω–Ω–æ–≥–æ LuCI-–ø–∞–∫–µ—Ç–∞.
          ```bash
          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
          opkg update
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          opkg install dnscrypt-proxy2
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ LuCI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∏–∑ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ .ipk —Ñ–∞–π–ª–∞)
          opkg install luci-app-dnscrypt-proxy2_*.ipk
          ```
          
          ### üîó –°—Å—ã–ª–∫–∏
          - [Documentation](https://github.com/kozhini/luci-app-dnscrypt-proxy2)
          - [Report Issues](https://github.com/kozhini/luci-app-dnscrypt-proxy2/issues)
          
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
