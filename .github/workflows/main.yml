name: Build luci-app-dnscrypt-proxy2 for OpenWrt/ImmortalWrt

on:
  workflow_dispatch:
    inputs:
      firmware_type:
        description: "Firmware type"
        type: choice
        required: true
        default: "openwrt"
        options:
          - "openwrt"
          - "immortalwrt"
      openwrt_version:
        description: "OpenWrt/ImmortalWrt version (e.g., 24.10.4 or SNAPSHOT)"
        type: string
        required: true
        default: "24.10.4"
      openwrt_target:
        description: "Target (e.g., mediatek)"
        type: string
        required: true
        default: "mediatek"
      openwrt_subtarget:
        description: "Subtarget (e.g., filogic)"
        type: string
        required: true
        default: "filogic"
      openwrt_arch:
        description: "Architecture (e.g., aarch64_cortex-a53)"
        type: string
        required: true
        default: "aarch64_cortex-a53"

jobs:
  build-package:
    name: "Build LuCI for ${{ inputs.firmware_type }}: ${{ inputs.openwrt_version }} - ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
        
    steps:
    
    # 1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        submodules: true 
        
    - name: Install dependencies
      run: |
        set -e -x
        sudo apt-get update
        sudo apt-get install -y build-essential gawk git python3 python3-setuptools rsync unzip wget xz-utils zstd
        
    - name: Extract package version from Makefile and set release tag
      id: pkg_version
      run: |
        set -e -x
        PKG_VERSION=$(grep '^PKG_VERSION:=' Makefile | cut -d= -f2 | tr -d '[:space:]')
        if [ -z "$PKG_VERSION" ]; then
          echo "‚ùå Cannot find PKG_VERSION in Makefile"
          exit 1
        fi
        echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
        TAG_NAME="luci-app-dnscrypt-proxy2-${{ inputs.firmware_type }}-${{ inputs.openwrt_version }}-${{ inputs.openwrt_target }}-${{ inputs.openwrt_subtarget }}-${PKG_VERSION}"
        echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
        echo "release_name=DNSCrypt Proxy LuCI Interface ${{ inputs.firmware_type }}-${{ inputs.openwrt_version }} for ${{ inputs.openwrt_arch }}" >> $GITHUB_ENV
        
    - name: Prepare SDK and Configure Build üõ†Ô∏è
      run: |
        set -e -x
        
        FIRMWARE_TYPE="${{ inputs.firmware_type }}"
        VERSION="${{ inputs.openwrt_version }}"
        TARGET="${{ inputs.openwrt_target }}"
        SUBTARGET="${{ inputs.openwrt_subtarget }}"
        ARCH="${{ inputs.openwrt_arch }}"
        
        # 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL SDK
        if [ "$FIRMWARE_TYPE" = "openwrt" ]; then
          BASE_DOMAIN="downloads.openwrt.org"
          SDK_PATTERN="openwrt-sdk"
        else
          BASE_DOMAIN="downloads.immortalwrt.org"
          SDK_PATTERN="immortalwrt-sdk"
        fi
        if [ "$VERSION" = "SNAPSHOT" ]; then
          BASE_URL="https://${BASE_DOMAIN}/snapshots/targets/${TARGET}/${SUBTARGET}/"
        else
          BASE_URL="https://${BASE_DOMAIN}/releases/${VERSION}/targets/${TARGET}/${SUBTARGET}/"
        fi
        
        echo "üîç Searching SDK at: ${BASE_URL}"
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ SDK
        sdk_url=$(curl -s "${BASE_URL}" | grep -oP "href=\"${SDK_PATTERN}[^\"]+\.tar\.(xz|zst|gz|bz2)\"" | sed -e 's/href="//' -e 's/"$//' | head -n1)
        
        if [[ -z "$sdk_url" ]]; then
          echo "‚ùå SDK file not found at ${BASE_URL}"
          exit 1
        fi
        
        curl -fsLO "${BASE_URL}${sdk_url}" || { echo "‚ùå Failed to download SDK"; exit 1; }
        file_name=$(basename "$sdk_url")
        
        tar -xf "$file_name" || { echo "‚ùå Failed to extract SDK"; exit 1; }
        rm -f *.tar.*
        
        SDK_DIR=$(find . -maxdepth 1 -type d -name "*${SDK_PATTERN}*" | head -1)
        mv "$SDK_DIR" sdk
        echo "‚úÖ SDK prepared in ./sdk/"
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –ø—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º minisign
        echo "‚ö†Ô∏è Checking architecture compatibility..."
        case "$ARCH" in
          *x86_64*|*x64*)
            echo "‚úÖ x86_64 architecture detected - precompiled minisign should work"
            USE_PRECOMPILED=true
            ;;
          *)
            echo "‚ö†Ô∏è Non-x86_64 architecture ($ARCH) detected"
            echo "‚ö†Ô∏è Precompiled minisign binary may not work on this architecture"
            echo "‚ö†Ô∏è Consider building from source for production use"
            USE_PRECOMPILED=false
            ;;
        esac
        echo "USE_PRECOMPILED=$USE_PRECOMPILED" >> $GITHUB_ENV
        
        # 4. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ minisign –∏ LuCI-–ø–∞–∫–µ—Ç–∞ –≤ SDK/package/
        echo "üì¶ Copying minisign and LuCI package to SDK/package/..."
        cp -r minisign sdk/package/
        
        mkdir -p sdk/package/luci-app-dnscrypt-proxy2
        rsync -av --exclude 'sdk' --exclude 'minisign' --exclude '.git' --exclude '.github' . sdk/package/luci-app-dnscrypt-proxy2/
        echo "‚úÖ All required packages copied to SDK"
        
        # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–¥–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        cd sdk
        
        # --- –ú–ï–•–ê–ù–ò–ó–ú –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö –î–õ–Ø FEEDS UPDATE ---
        retry_feeds_update() {
            local max_attempts=5
            local attempt=1
            while [ $attempt -le $max_attempts ]; do
                echo "üîÑ Updating feeds (Attempt $attempt/$max_attempts)..."
                if ./scripts/feeds update -a; then
                    echo "‚úÖ Feeds updated successfully."
                    return 0
                else
                    echo "‚ùå Failed to update feeds on attempt $attempt. Waiting 15 seconds before retry..."
                    sleep 15
                    attempt=$((attempt + 1))
                fi
            done
            return 1
        }
        
        if ! retry_feeds_update; then
            echo "‚ùå Failed to update feeds after multiple attempts."
            exit 1
        fi
        # --- –ö–û–ù–ï–¶ –ú–ï–•–ê–ù–ò–ó–ú–ê –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö ---
        
        echo "üì• Installing required packages..."
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dnscrypt-proxy2 –ò–ó FEEDS
        ./scripts/feeds install dnscrypt-proxy2 || { echo "‚ùå Failed to install dnscrypt-proxy2 from feeds"; exit 1; }
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ luci
        ./scripts/feeds install luci-compat luci-lib-ip || { echo "‚ùå Failed to install luci deps"; exit 1; }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LuCI-–ø–∞–∫–µ—Ç (—á—Ç–æ–±—ã –æ–Ω –±—ã–ª –≤ feeds)
        ./scripts/feeds install luci-app-dnscrypt-proxy2 || { echo "‚ùå Failed to install luci-app-dnscrypt-proxy2"; exit 1; }
        echo "‚úÖ Base dependencies installed"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ config.buildinfo
        echo "‚öôÔ∏è  Downloading base config..."
        curl -fsL "${BASE_URL}/config.buildinfo" > .config || { echo "‚ö†Ô∏è  config.buildinfo not found, using default"; }
        
        # –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ø–∞–∫–µ—Ç—ã
        echo "CONFIG_PACKAGE_luci-app-dnscrypt-proxy2=y" >> .config
        echo "CONFIG_PACKAGE_minisign=y" >> .config
        
        make defconfig
        echo "‚úÖ Build configuration completed"
        
    - name: Download Minisign Precompiled Binary
      run: |
        set -e -x
        cd sdk
        
        echo "üì• Downloading minisign precompiled binary..."
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        mkdir -p dl
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Linux –±–∏–Ω–∞—Ä–Ω–∏–∫
        MINISIGN_URL="https://github.com/jedisct1/minisign/releases/download/0.12/minisign-0.12-linux.tar.gz"
        
        echo "Downloading from: $MINISIGN_URL"
        
        if wget -q --spider "$MINISIGN_URL"; then
          wget -O dl/minisign-0.12-linux.tar.gz "$MINISIGN_URL"
          echo "‚úÖ Downloaded minisign binary successfully"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
          echo "üìã Archive contents:"
          tar -tzf dl/minisign-0.12-linux.tar.gz
        else
          echo "‚ùå Failed to download minisign binary from $MINISIGN_URL"
          exit 1
        fi
        
    - name: Build Minisign Package
      run: |
        set -e -x
        cd sdk
        echo "üî® Building minisign package..."
        make package/minisign/compile V=s -j $(nproc) || { echo "‚ùå Failed to build minisign"; exit 1; }
        echo "‚úÖ Minisign package built successfully"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω
        echo "üì¶ Built minisign packages:"
        find bin -name "*minisign*.ipk" -ls
        
    - name: Compile LuCI Package
      run: |
        set -e -x
        cd sdk
        echo "üî® Compiling luci-app-dnscrypt-proxy2..."
        make package/luci-app-dnscrypt-proxy2/compile V=s -j $(nproc) || { echo "‚ùå Failed to compile LuCI package"; exit 1; }
        echo "‚úÖ LuCI package compiled successfully"
        
    - name: Prepare artifacts for release
      id: prepare_artifacts
      run: |
        set -e -x
        mkdir -p release
        
        echo "üì¶ Collecting built packages..."
        # –°–æ–±–∏—Ä–∞–µ–º minisign –∏ LuCI-–ø–∞–∫–µ—Ç
        find sdk/bin -type f -name "*luci-app-dnscrypt-proxy2*.ipk" -exec cp {} release/ \;
        find sdk/bin -type f -name "*minisign*.ipk" -exec cp {} release/ \;
        
        IPK_COUNT=$(find release -type f -name "*.ipk" | wc -l)
        if [ "$IPK_COUNT" -eq 0 ]; then
          echo "‚ùå No IPK files found! Build may have failed."
          echo "Looking for packages in sdk/bin:"
          find sdk/bin -name "*.ipk" -ls
          exit 1
        fi
        
        echo "‚úÖ Found $IPK_COUNT package(s):"
        ls -lh release/
        
    - name: Get current date for release notes
      id: get_date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        tag_name: ${{ env.tag_name }}
        name: ${{ env.release_name }}
        body: |
          ## üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ DNSCrypt Proxy
          
          –≠—Ç–æ—Ç —Ä–µ–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç **minisign** (–ø—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x86_64 –±–∏–Ω–∞—Ä–Ω–∏–∫) –∏ **luci-app-dnscrypt-proxy2** (LuCI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å).
          
          ‚ö†Ô∏è **–í–∞–∂–Ω–æ:** 
          - –î–µ–º–æ–Ω **dnscrypt-proxy2** –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è OpenWrt/ImmortalWrt
          - **minisign** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x86_64 –±–∏–Ω–∞—Ä–Ω–∏–∫ –∏ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞—Ö
          - –î–ª—è –Ω–µ-x86_64 —Å–∏—Å—Ç–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è minisign –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
          
          ### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ
          - **–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** ${{ steps.get_date.outputs.date }}

          
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
