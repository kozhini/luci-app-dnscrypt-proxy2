name: Build luci-app-dnscrypt-proxy2 for OpenWrt/ImmortalWrt

on:
  workflow_dispatch:
    inputs:
      firmware_type:
        description: "Firmware type"
        type: choice
        required: true
        default: "openwrt"
        options:
          - "openwrt"
          - "immortalwrt"
      openwrt_version:
        description: "OpenWrt/ImmortalWrt version (e.g., 24.10.4 or SNAPSHOT)"
        type: string
        required: true
        default: "24.10.4"
      openwrt_target:
        description: "Target (e.g., mediatek)"
        type: string
        required: true
        default: "mediatek"
      openwrt_subtarget:
        description: "Subtarget (e.g., filogic)"
        type: string
        required: true
        default: "filogic"
      openwrt_arch:
        description: "Architecture (e.g., aarch64_cortex-a53)"
        type: string
        required: true
        default: "aarch64_cortex-a53"

jobs:
  build-package:
    name: "Build dnscrypt-proxy2/LuCI for ${{ inputs.firmware_type }}: ${{ inputs.openwrt_version }} - ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout package repository
      uses: actions/checkout@v5
      with:
        path: luci-app-dnscrypt-proxy2
    
    - name: Install dependencies
      run: |
        set -e -x
        sudo apt-get update
        sudo apt-get install -y build-essential gawk git python3 python3-setuptools rsync unzip wget xz-utils zstd
    
    # ---
    
    - name: Extract package version from Makefile and set release tag
      id: pkg_version
      run: |
        set -e -x
        PKG_VERSION=$(grep '^PKG_VERSION:=' luci-app-dnscrypt-proxy2/Makefile | cut -d= -f2 | tr -d '[:space:]')
        if [ -z "$PKG_VERSION" ]; then
          echo "❌ Cannot find PKG_VERSION in Makefile"
          exit 1
        fi
        echo "✅ Found PKG_VERSION: $PKG_VERSION"
        echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
        TAG_NAME="luci-app-dnscrypt-proxy2-${{ inputs.firmware_type }}-${{ inputs.openwrt_version }}-${{ inputs.openwrt_target }}-${{ inputs.openwrt_subtarget }}-${PKG_VERSION}"
        echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
        echo "release_name=DNSCrypt Proxy (Daemon + LuCI) ${{ inputs.firmware_type }}-${{ inputs.openwrt_version }} for ${{ inputs.openwrt_arch }}" >> $GITHUB_ENV
    
    - name: Prepare SDK and Configure Build 🛠️
      run: |
        set -e -x
        
        FIRMWARE_TYPE="${{ inputs.firmware_type }}"
        VERSION="${{ inputs.openwrt_version }}"
        TARGET="${{ inputs.openwrt_target }}"
        SUBTARGET="${{ inputs.openwrt_subtarget }}"
        
        # 1. Определение URL SDK
        if [ "$FIRMWARE_TYPE" = "openwrt" ]; then
          BASE_DOMAIN="downloads.openwrt.org"
          SDK_PATTERN="openwrt-sdk"
        else
          BASE_DOMAIN="downloads.immortalwrt.org"
          SDK_PATTERN="immortalwrt-sdk"
        fi

        if [ "$VERSION" = "SNAPSHOT" ]; then
          BASE_URL="https://${BASE_DOMAIN}/snapshots/targets/${TARGET}/${SUBTARGET}/"
        else
          BASE_URL="https://${BASE_DOMAIN}/releases/${VERSION}/targets/${TARGET}/${SUBTARGET}/"
        fi
        
        echo "🔍 Searching SDK at: ${BASE_URL}"
        
        # 2. Загрузка и распаковка SDK (улучшенный regex для всех типов архивов)
        sdk_url=$(curl -s "${BASE_URL}" | grep -oP "href=\"${SDK_PATTERN}[^\"]+\.tar\.(xz|zst|gz|bz2)\"" | sed -e 's/href="//' -e 's/"$//' | head -n1)
        
        if [[ -z "$sdk_url" ]]; then
          echo "❌ SDK file not found at ${BASE_URL}"
          echo "Available files:"
          curl -s "${BASE_URL}" | grep -o "href=\"[^\"]*\.tar\.[^\"]*\"" | head -10
          exit 1
        fi
        
        echo "✅ Found SDK: ${sdk_url}"
        
        curl -fsLO "${BASE_URL}${sdk_url}" || { echo "❌ Failed to download SDK"; exit 1; }
        file_name=$(basename "$sdk_url")
        
        echo "📦 Extracting SDK..."
        tar -xf "$file_name" || { echo "❌ Failed to extract SDK"; exit 1; }
        rm -f *.tar.*
        
        SDK_DIR=$(find . -maxdepth 1 -type d -name "*${SDK_PATTERN}*" | head -1)
        if [[ -z "$SDK_DIR" ]]; then
          echo "❌ SDK directory not found after extraction"
          exit 1
        fi
        
        mv "$SDK_DIR" sdk
        echo "✅ SDK prepared in ./sdk/"
        
        # 3. Копирование нашего пакета в SDK
        mkdir -p sdk/package/luci-app-dnscrypt-proxy2
        rsync -a --copy-links --exclude 'sdk' --exclude '.git' --exclude '.github' luci-app-dnscrypt-proxy2/ sdk/package/luci-app-dnscrypt-proxy2/
        echo "✅ Package copied to SDK"
        
        # 4. Обновление фидов и установка зависимостей
        cd sdk
        echo "🔄 Updating feeds..."
        ./scripts/feeds update -a || { echo "❌ Failed to update feeds"; exit 1; }
        
        echo "📥 Installing required packages..."
        ./scripts/feeds install dnscrypt-proxy2 || { echo "❌ Failed to install dnscrypt-proxy2"; exit 1; }
        ./scripts/feeds install minisign || { echo "❌ Failed to install minisign"; exit 1; }
        ./scripts/feeds install luci-compat || { echo "❌ Failed to install luci-compat"; exit 1; }
        ./scripts/feeds install luci-lib-ip || { echo "❌ Failed to install luci-lib-ip"; exit 1; }
        echo "✅ All dependencies installed"
        
        # Загрузка config.buildinfo
        echo "⚙️  Downloading base config..."
        curl -fsL "${BASE_URL}/config.buildinfo" > .config || { echo "⚠️  config.buildinfo not found, using default"; }
        
        # Явно включаем пакеты
        echo "CONFIG_PACKAGE_luci-app-dnscrypt-proxy2=y" >> .config
        echo "CONFIG_PACKAGE_dnscrypt-proxy2=y" >> .config
        echo "CONFIG_PACKAGE_minisign=y" >> .config
        echo "CONFIG_PACKAGE_luci-app-dnscrypt-proxy2_INCLUDE_minisign=y" >> .config
        
        make defconfig
        echo "✅ Build configuration completed"
    
    - name: Compile Architecture-Dependent Packages (Daemon)
      run: |
        set -e -x
        cd sdk
        echo "🔨 Compiling dnscrypt-proxy2..."
        make package/dnscrypt-proxy2/compile V=s -j $(nproc) || { echo "❌ Failed to compile dnscrypt-proxy2"; exit 1; }
        
        echo "🔨 Compiling minisign..."
        make package/minisign/compile V=s -j $(nproc) || { echo "❌ Failed to compile minisign"; exit 1; }
        
        echo "✅ Daemon packages compiled successfully"

    - name: Compile LuCI Package (Architecture 'all')
      run: |
        set -e -x
        cd sdk
        echo "🔨 Compiling luci-app-dnscrypt-proxy2..."
        make package/luci-app-dnscrypt-proxy2/compile V=s -j $(nproc) || { echo "❌ Failed to compile LuCI package"; exit 1; }
        echo "✅ LuCI package compiled successfully"
    
    # ---
    
    - name: Prepare artifacts for release
      id: prepare_artifacts
      run: |
        set -e -x
        mkdir -p release
        
        echo "📦 Collecting built packages..."
        # Собираем все пакеты, связанные с dnscrypt-proxy2
        find sdk/bin -type f -name "*dnscrypt-proxy2*.ipk" -exec cp {} release/ \;
        find sdk/bin -type f -name "minisign*.ipk" -exec cp {} release/ \;
        
        # Проверяем, что файлы найдены
        IPK_COUNT=$(find release -type f -name "*.ipk" | wc -l)
        if [ "$IPK_COUNT" -eq 0 ]; then
          echo "❌ No IPK files found! Build may have failed."
          echo "Contents of sdk/bin:"
          find sdk/bin -type f -name "*.ipk" || echo "No IPK files in sdk/bin"
          exit 1
        fi
        
        echo "✅ Found $IPK_COUNT package(s):"
        ls -lh release/
    
    # ---
    
    - name: Get current date for release notes
      id: get_date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
    
    
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        tag_name: ${{ env.tag_name }}
        name: ${{ env.release_name }}
        body: |
          ## 📦 Automatic build of DNSCrypt Proxy packages
          
          This release contains **dnscrypt-proxy2** (daemon), **minisign**, and **luci-app-dnscrypt-proxy2** (LuCI interface) packages.
          
          ### 📋 Build Information
          - **Build Date:** ${{ steps.get_date.outputs.date }}
          - **Firmware:** ${{ inputs.firmware_type }}
          - **Version:** ${{ inputs.openwrt_version }}
          - **Architecture:** ${{ inputs.openwrt_arch }}
          - **Target/Subtarget:** ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}
          - **Package Version:** ${{ env.PKG_VERSION }}
          
          ### 📥 Installation
          ```bash
          opkg update
          opkg install luci-app-dnscrypt-proxy2_*.ipk
          opkg install dnscrypt-proxy2_*.ipk
          opkg install minisign_*.ipk  # optional, for custom resolver lists
          ```
          
          ### 🔗 Links
          - [Documentation](https://github.com/kozhini/luci-app-dnscrypt-proxy2)
          - [Report Issues](https://github.com/kozhini/luci-app-dnscrypt-proxy2/issues)
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
